{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing System.Threading;\n\nnamespace Tetris\n{\n    public partial class Form1 : Form\n    {\n        int x = 3, y = 0;\n        int i, j, k;\n        int rotate = 0;\n        int offset_x = 100, offset_y = 50;\n        int block_num = 0;\n        int pre_block_num = 0;\n        int score = 0;\n        int hold_block_num = 0;\n        int hold_flag = 0;\n\n        int[] block_color = new int[7] { 15, 9, 10, 11, 12, 13, 14 };\n\n        Random r = new Random();\n        Image[] block_image = new Image[8];\n        String[] block_name = new string[] {\"block_white\", \"block_red\", \"block_blue\", \"block_yellow\",\n                                            \"block_green\", \"block_orange\",\"block_brown\", \"block_purple\"};\n        PictureBox[,] pictureBox = new PictureBox[20, 10];\n        PictureBox[,] previewBox = new PictureBox[4, 4];\n        PictureBox[,] holdBox = new PictureBox[4, 4];\n\n        ConsoleColor[] colors = (ConsoleColor[])ConsoleColor.GetValues(typeof(ConsoleColor));\n        static System.Windows.Forms.Timer timer_1sec = new System.Windows.Forms.Timer();\n\n        int[,] background = new int[22, 12] {\n                {1,1,1,1,1,1,1,1,1,1,1,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,1},\n                {1,0,0,0,0,0,0,0,0,0,0,0},\n                {1,0,0,0,0,0,0,0,0,0,0,0},\n                {1,1,1,1,1,1,1,1,1,1,1,1}\n            };\n        int[,,,] block = new int[7, 4, 4, 4] {\n                {\n                    // L \n                    {\n                        {0,0,0,0},\n                        {0,1,0,0},\n                        {0,1,1,1},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,1,1,0},\n                        {0,1,0,0},\n                        {0,1,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {1,1,1,0},\n                        {0,0,1,0},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,1,0},\n                        {0,0,1,0},\n                        {0,1,1,0},\n                        {0,0,0,0}\n                    }\n                },\n                // ㅗ\n                {\n                    {\n                        {0,0,0,0},\n                        {0,0,1,0},\n                        {0,1,1,1},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,1,0,0},\n                        {0,1,1,0},\n                        {0,1,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,1,1,1},\n                        {0,0,1,0},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,0,1,0},\n                        {0,1,1,0},\n                        {0,0,1,0}\n                    }\n                },\n                // \n                {\n                    {\n                        {0,0,0,0},\n                        {0,0,0,1},\n                        {0,1,1,1},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,1,0,0},\n                        {0,1,0,0},\n                        {0,1,1,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,1,1,1},\n                        {0,1,0,0},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,1,1,0},\n                        {0,0,1,0},\n                        {0,0,1,0}\n                    }\n                },\n                // ㅁ\n                {\n                    {\n                        {0,0,0,0},\n                        {0,1,1,0},\n                        {0,1,1,0},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,1,1,0},\n                        {0,1,1,0},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,1,1,0},\n                        {0,1,1,0},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,1,1,0},\n                        {0,1,1,0},\n                        {0,0,0,0}\n                    }\n                },\n                // ㅡ\n                {\n                    {\n                        {0,0,0,0},\n                        {1,1,1,1},\n                        {0,0,0,0},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,1,0},\n                        {0,0,1,0},\n                        {0,0,1,0},\n                        {0,0,1,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,0,0,0},\n                        {1,1,1,1},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,1,0,0},\n                        {0,1,0,0},\n                        {0,1,0,0},\n                        {0,1,0,0}\n                    }\n                },\n                //\n                {\n                    {\n                        {0,0,0,0},\n                        {0,1,1,0},\n                        {0,0,1,1},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,1,0},\n                        {0,1,1,0},\n                        {0,1,0,0},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {1,1,0,0},\n                        {0,1,1,0},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,0,1,0},\n                        {0,1,1,0},\n                        {0,1,0,0}\n                    }\n                },\n                {\n                    {\n                        {0,0,0,0},\n                        {0,1,1,0},\n                        {1,1,0,0},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,1,0,0},\n                        {0,1,1,0},\n                        {0,0,1,0}\n                    },\n                    {\n                        {0,0,0,0},\n                        {0,0,1,1},\n                        {0,1,1,0},\n                        {0,0,0,0}\n                    },\n                    {\n                        {0,1,0,0},\n                        {0,1,1,0},\n                        {0,0,1,0},\n                        {0,0,0,0}\n                    }\n                },\n            };\n\n        //        int[,,] rotate_block = new int[7, 4] = {\n        //            {\n        //                    // L \n        //                    {\n        //                        {0,0,0,0},\n        //                        {0,1,0,0},\n        //                        {0,1,1,1},\n        //                        {0,0,0,0}\n        //                    },\n        //};\n\n        //--------------------------------------------------------------------------------------------\n        public Form1()\n        {\n            InitializeComponent();\n\n            for (int i = 0; i < 8; i++)\n                block_image[i] = Image.FromFile(string.Format(@\"C:\\\\Users\\\\Jiwan\\\\Desktop\\\\Dreaming\\\\tetris_C#_winform_1\\\\tetris\\\\blocks\\\\{0}.bmp\", block_name[i]));\n\n\n            timer_1sec.Interval = 1000;\n            timer_1sec.Tick += new EventHandler(event_1sec);\n            timer_1sec.Start();\n\n            this.KeyPreview = true;\n        }\n        //--------------------------------------------------------------------------------------------\n        private void Form1_Load(object sender, EventArgs e)\n        {\n            for (j = 0; j < 20; j++)\n            {\n                for (i = 0; i < 10; i++)\n                {\n                    pictureBox[j, i] = new PictureBox();\n                    pictureBox[j, i].Image = block_image[0];\n                    pictureBox[j, i].Location = new Point(offset_x + (i * 22), offset_y + (j * 22));\n                    pictureBox[j, i].Size = new Size(20, 20);\n                    this.Controls.Add(pictureBox[j, i]);\n                }\n            }\n\n            for (j = 0; j < 4; j++)\n            {\n                for (i = 0; i < 4; i++)\n                {\n                    previewBox[j, i] = new PictureBox();\n                    previewBox[j, i].Image = block_image[0];\n                    previewBox[j, i].Location = new Point(400 + (i * 22), 10 + (j * 22));\n                    previewBox[j, i].Size = new Size(20, 20);\n                    this.Controls.Add(previewBox[j, i]);\n                }\n            }\n\n            for (j = 0; j < 4; j++)\n            {\n                for (i = 0; i < 4; i++)\n                {\n                    holdBox[j, i] = new PictureBox();\n                    holdBox[j, i].Image = block_image[0];\n                    holdBox[j, i].Location = new Point(10 + (i * 22), 10 + (j * 22));\n                    holdBox[j, i].Size = new Size(20, 20);\n                    this.Controls.Add(holdBox[j, i]);\n                }\n            }\n\n            Lb_score.Text = \"Score : \" + score.ToString();\n            pre_block_num = r.Next(0, 7);\n\n            block_num = pre_block_num;\n            make_preview_block(pre_block_num);\n\n            make_block();\n        }\n        //--------------------------------------------------------------------------------------------\n        //private void block_rotate_func(int[,,,] block)\n        //{\n        //    int tmp_x;\n\n        //    for (j = 0; j < 4; j++)\n        //    {\n        //        for (i = 0; i < 4; i++)\n        //        {\n        //            tmp_x = block[block_num, rotate, j, i];\n        //            rotate_block[i, j] = x - y;\n        //            x = y;\n        //            y = 3 - x;\n        //        }\n        //    }\n        //}\n        //--------------------------------------------------------------------------------------------\n        private void make_preview_block(int blk_num)\n        {\n            for (j = 0; j < 4; j++)\n                for (i = 0; i < 4; i++)\n                {\n                    if (block[blk_num, 0, j, i] == 1)\n                        previewBox[j, i].Image = block_image[blk_num + 1];\n                    else\n                        previewBox[j, i].Image = block_image[0];\n                }\n        }\n        //--------------------------------------------------------------------------------------------\n        private void make_hold_block()\n        {\n            for (j = 0; j < 4; j++)\n                for (i = 0; i < 4; i++)\n                {\n                    if (block[hold_block_num, 0, j, i] == 1)\n                        holdBox[j, i].Image = block_image[hold_block_num + 1];\n                    else\n                        holdBox[j, i].Image = block_image[0];\n                }\n        }\n        //--------------------------------------------------------------------------------------------\n        private void make_block()\n        {\n            for (j = 0; j < 4; j++)\n                for (i = 0; i < 4; i++)\n                    if (block[block_num, rotate, j, i] == 1)\n                        pictureBox[j + y - 1, i + x - 1].Image = block_image[block_num + 1];\n        }\n        //--------------------------------------------------------------------------------------------\n        private void delete_block()\n        {\n            for (j = 0; j < 4; j++)\n                for (i = 0; i < 4; i++)\n                    if (block[block_num, rotat\n                         e, j, i] == 1 && background[y + j, x + i] != 1)\n                        pictureBox[j + y - 1, i + x - 1].Image = block_image[0];\n        }\n        //--------------------------------------------------------------------------------------------\n        private int overlap(int rot, int x_pos, int y_pos)\n        {\n            int count_overlap = 0;\n\n            for (j = 0; j < 4; j++)\n                for (i = 0; i < 4; i++)\n                    if (block[block_num, rot, j, i] >= 1 && background[y_pos + j, x_pos + i] >= 1)\n                        count_overlap++;\n\n            return count_overlap;\n        }\n        //--------------------------------------------------------------------------------------------\n        private void insert_block(int x_pos, int y_pos, int[,] background)\n        {\n            int i, j;\n            for (j = 0; j < 4; j++)\n                for (i = 0; i < 4; i++)\n                    if (block[block_num, rotate, j, i] == 1)\n                        background[y_pos + j, x_pos + i] = 1;\n        }\n        //--------------------------------------------------------------------------------------------\n        private void draw_background()\n        {\n            for (j = 0; j < 20; j++)\n            {\n                for (i = 0; i < 10; i++)\n                {\n                    if (background[j + 1, i + 1] >= 1)\n                        pictureBox[j, i].Image = block_image[background[j + 1, i + 1]];\n                    else if (background[j + 1, i + 1] == 0)\n                        pictureBox[j, i].Image = block_image[0];\n                }\n            }\n        }\n        //--------------------------------------------------------------------------------------------\n        private void show_score()\n        {\n            score += 10;\n            Lb_score.Text = \"Score : \" + score.ToString();\n        }\n        //--------------------------------------------------------------------------------------------\n\n\n        private void event_1sec(Object myObject, EventArgs myEventArgs)\n        {\n            if (overlap(rotate, x, y + 1) == 0)\n            {\n                // delete block\n                delete_block();\n\n                y++;\n\n                // make block\n                make_block();\n            }\n            else\n            {\n                int count_block = 0;\n                insert_block(x, y, background);\n\n                for (j = 0; j < 4; j++)\n                {\n                    for (i = 0; i < 4; i++)\n                    {\n                        if (block[block_num, rotate, j, i] == 1)\n                            background[y + j, x + i] = 1;\n                    }\n                }\n\n                for (k = 1; k <= 20; k++)\n                {\n                    count_block = 0;\n                    for (i = 0; i < 10; i++)\n                    {\n                        if (background[k, i + 1] == 1)\n                        {\n                            count_block++;\n                        }\n                    }\n\n                    if (count_block == 10)\n                    {\n                        for (j = k - 1; j > 0; j--)\n                        {\n                            for (i = 0; i < 10; i++)\n                            {\n                                background[j + 1, i + 1] = background[j, i + 1];\n                            }\n                        }\n\n                        draw_background();\n                        show_score();\n                    }\n                }\n\n                block_num = pre_block_num;\n                pre_block_num = r.Next(0, 7);\n                make_preview_block(pre_block_num);\n\n                if (hold_flag == 1)\n                {\n                    hold_block_num = block_num;\n                    hold_flag = 0;\n\n                    pre_block_num = r.Next(0, 7);\n                    make_preview_block(pre_block_num);\n                }\n                else\n                    block_num = pre_block_num;\n\n                x = 3;\n                y = 0;\n                rotate = 0;\n            }\n        }\n\n\n        //--------------------------------------------------------------------------------------------\n        private void Form1_KeyPress(object sender, KeyPressEventArgs e)\n        {\n            if (e.KeyChar == 'a')\n            {\n                if (overlap(rotate, x - 1, y) == 0)\n                {\n                    // delete block\n                    delete_block();\n\n                    x--;\n\n                    // make block\n                    make_block();\n                }\n            }\n            else if (e.KeyChar == 'd')\n            {\n                if (overlap(rotate, x + 1, y) == 0)\n                {\n                    // delete block\n                    delete_block();\n\n                    x++;\n\n                    make_block();\n                }\n            }\n            else if (e.KeyChar == 'w')\n            {\n                if (overlap(rotate, x, y - 1) == 0)\n                {\n                    // delete block\n                    delete_block();\n\n                    y--;\n\n                    // make block\n                    make_block();\n                }\n            }\n            else if (e.KeyChar == 's')\n            {\n                if (overlap(rotate, x, y + 1) == 0)\n                {\n                    // delete block\n                    delete_block();\n\n                    y++;\n\n                    // make block\n                    make_block();\n                }\n            }\n            else if (e.KeyChar == ' ')\n            {\n                while (overlap(rotate, x, y + 1) == 0)\n                {\n                    // delete block\n                    delete_block();\n\n                    y++;\n\n                    // make block\n                    make_block();\n                }\n            }\n            else if (e.KeyChar == 'h')\n            {\n                hold_block_num = block_num;\n                make_hold_block();\n                hold_flag = 1;\n            }\n            else if (e.KeyChar == 'r')\n            {\n                int rotate_tmp = rotate;\n\n                rotate_tmp++;\n                if (rotate_tmp >= 4) rotate_tmp = 0;\n\n                if (overlap(rotate_tmp, x, y) == 0)\n                {\n                    // delete block\n                    delete_block();\n\n\n                    rotate++;\n                    if (rotate >= 4) rotate = 0;\n\n                    // make block\n                    make_block();\n                }\n            }\n        }\n    }\n}",
			"file": "/C/Users/JiwanHan/Desktop/Tetris_CS.cs",
			"file_size": 19912,
			"file_write_time": 132265709069540834,
			"settings":
			{
				"buffer_size": 19337,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "using System;"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/JiwanHan/Desktop/Tetris_Dotmatrix_LCD.cpp"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"overlap",
			"over",
			"each"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/JiwanHan/Desktop/Tetris_CS.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19337,
						"regions":
						{
						},
						"selection":
						[
							[
								14921,
								14907
							]
						],
						"settings":
						{
							"auto_name": "using System;",
							"syntax": "Packages/C#/C#.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7653.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Tetris_Dotmatrix_LCD.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
